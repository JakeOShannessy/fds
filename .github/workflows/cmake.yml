name: cmake
env:
  # update urls for oneapi packages according to
  # https://github.com/oneapi-src/oneapi-ci/blob/master/.github/workflows/build_all.yml
  WINDOWS_BASEKIT_URL: https://registrationcenter-download.intel.com/akdlm/IRC_NAS/b380d914-366b-4b77-a74a-05e3c38b3514/intel-oneapi-base-toolkit-2025.0.0.882_offline.exe
  WINDOWS_BASEKIT_COMPONENTS: intel.oneapi.win.mkl.devel
  WINDOWS_HPCKIT_URL: https://registrationcenter-download.intel.com/akdlm/IRC_NAS/f07e32fa-b505-4b90-8a79-e328ce9ad9d6/intel-oneapi-hpc-toolkit-2025.0.0.822_offline.exe
  WINDOWS_HPCKIT_COMPONENTS: intel.oneapi.win.ifort-compiler:intel.oneapi.win.mpi.devel

on:
  push:
    paths:
    - .github/**
    - Build/**
    - Source/**
  pull_request:
    paths:
    - .github/**
    - Build/**
    - Source/**


concurrency:
  group: ${{ github.event_name }}-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}


permissions:
  contents: read

jobs:
  cmake-linux:
    if: false
    name: cmake ${{ matrix.container }} ${{ matrix.mpi }} ${{ matrix.build_type }}
    runs-on: [ubuntu-latest]
    # container: ${{ matrix.container }}
    strategy:
      matrix:
        container:
          # - "fedora:40"
          # - "rockylinux:9"
          - "ubuntu:24.04"
        mpi:
          - "intelmpi"
          - "openmpi"
        build_type:
          - "Debug"
          - "Release"
    steps:
    - name: Install prerequisites
      if: matrix.container != 'ubuntu:24.04'
      run: dnf install -y git gcc make cmake

    # Setup OneAPI, icx is necessary for third-party libs
    - uses: rscohn2/setup-oneapi@v0
      if: matrix.mpi == 'intelmpi'
      with:
        components: |
          ifx
          icx
          impi
          mkl

    - uses: rscohn2/setup-oneapi@v0
      if: matrix.mpi != 'intelmpi'
      with:
        components: |
          mkl

    - name: install openmpi
      if: matrix.mpi == 'openmpi' && matrix.container != 'ubuntu:24.04'
      run: dnf install -y openmpi-devel

    - name: install openmpi
      if: matrix.mpi == 'openmpi' && matrix.container == 'ubuntu:24.04'
      run: |
        sudo apt-get update
        sudo apt-get install libopenmpi-dev openmpi-bin

    - uses: actions/checkout@v4

    - name: set linux-gnu compiler
      if: runner.os == 'Linux' && matrix.mpi == 'openmpi'
      shell: bash
      run: |
        echo "CC=gcc" >> $GITHUB_ENV
        echo "CXX=g++" >> $GITHUB_ENV
        echo "FC=gfortran" >> $GITHUB_ENV

    - name: set linux-gnu compiler
      if: runner.os == 'Linux' && matrix.mpi == 'intelmpi'
      shell: bash
      run: |
        echo "CC=icx" >> $GITHUB_ENV
        echo "CXX=icx" >> $GITHUB_ENV
        echo "FC=mpiifx" >> $GITHUB_ENV

    - name: build fds
      run: |
        source /opt/intel/oneapi/setvars.sh
        cmake -B builddir -S . -DCMAKE_BUILD_TYPE=${{matrix.build_type}}
        cmake --build builddir -j

  cmake-osx:
    if: false
    # Set the name of this build, variable depending on the OS
    name: cmake ${{ matrix.os }} ${{ matrix.mpi }} ${{ matrix.build_type }}
    strategy:
      fail-fast: false
      # The matrix sets all the different combinations of builds, e.g. platforms
      # and build configurations
      matrix:
        os:
          - macos-latest
        mpi:
          - "openmpi"
        build_type:
          - "Debug"
          # - "Release"
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: install openmpi
        run: brew install open-mpi

      - name: set macos gcc
        shell: bash
        run: |
          echo "CC=gcc-14" >> $GITHUB_ENV
          echo "CXX=g++-14" >> $GITHUB_ENV
          echo "FC=gfortran-14" >> $GITHUB_ENV
          echo "OMPI_FC=gfortran-14" >> $GITHUB_ENV
          brew install glew gd zlib json-c
      - name: Build
        shell: bash
        run: |
          cmake -B builddir -DCMAKE_BUILD_TYPE=${{matrix.build_type}}
          cmake --build builddir -j
  cmake-windows:
    # build on windows using ifort with intelmpi and mkl based on
    # https://github.com/oneapi-src/oneapi-ci

    name: windows intel intelmpi ${{ matrix.build_type }}
    runs-on: [windows-latest]
    strategy:
      fail-fast: false
      # The matrix sets all the different combinations of builds, e.g. platforms
      # and build configurations
      matrix:
        build_type:
          - "Debug"
          # - "Release"
    defaults:
      run:
        shell: cmd

    steps:
    - uses: actions/checkout@v4

      # install oneapi components from web installer based on
      # oneapi-ci/scripts/install_windows.bat
    - name: cache install oneapi
      id: cache-install
      uses: actions/cache@v4
      with:
        path: C:\Program Files (x86)\Intel\oneAPI\
        key: install-${{ env.WINDOWS_BASEKIT_URL }}-${{ env.WINDOWS_BASEKIT_COMPONENTS }}-${{ env.WINDOWS_HPCKIT_URL }}-${{ env.WINDOWS_HPCKIT_COMPONENTS }}
    - name: install oneapi mkl
      if: steps.cache-install.outputs.cache-hit != 'true'
      run: |
        curl.exe --output %TEMP%\webimage_base.exe --url %WINDOWS_BASEKIT_URL% --retry 5 --retry-delay 5
        start /b /wait %TEMP%\webimage_base.exe -s -x -f webimage_base_extracted --log extract_base.log
        del %TEMP%\webimage_base.exe
        webimage_base_extracted\bootstrapper.exe -s --action install --components=%WINDOWS_BASEKIT_COMPONENTS% --eula=accept -p=NEED_VS2017_INTEGRATION=0 -p=NEED_VS2019_INTEGRATION=0 --log-dir=.
        rd /s/q "webimage_base_extracted"
    - name: install oneapi compiler, mpi
      if: steps.cache-install.outputs.cache-hit != 'true'
      run: |
        curl.exe --output %TEMP%\webimage_hpc.exe --url %WINDOWS_HPCKIT_URL% --retry 5 --retry-delay 5
        start /b /wait %TEMP%\webimage_hpc.exe -s -x -f webimage_hpc_extracted --log extract_hpc.log
        del %TEMP%\webimage_hpc.exe
        webimage_hpc_extracted\bootstrapper.exe -s --action install --components=%WINDOWS_HPCKIT_COMPONENTS% --eula=accept -p=NEED_VS2017_INTEGRATION=0 -p=NEED_VS2019_INTEGRATION=0 --log-dir=.
        rd /s/q "webimage_hpc_extracted"

    - name: build fds
      run: |
        call Build\Scripts\setup_intel_compilers.bat
        cmake -B builddir -S . -DCMAKE_BUILD_TYPE=${{matrix.build_type}} -G Ninja
        cmake --build builddir -j
