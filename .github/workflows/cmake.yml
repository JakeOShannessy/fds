name: cmake

on:
  push:
    paths:
    - .github/**
    - Build/**
    - Source/**
  pull_request:
    paths:
    - .github/**
    - Build/**
    - Source/**


concurrency:
  group: ${{ github.event_name }}-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}


permissions:
  contents: read

jobs:
  cmake-linux:
    name: cmake ${{ matrix.container }} ${{ matrix.mpi }} ${{ matrix.build_type }}
    runs-on: [ubuntu-latest]
    # container: ${{ matrix.container }}
    strategy:
      matrix:
        container:
          # - "fedora:40"
          # - "rockylinux:9"
          - "ubuntu:24.04"
        mpi:
          - "intelmpi"
          - "openmpi"
        build_type:
          - "Debug"
          - "Release"
    steps:
    - name: Install prerequisites
      if: matrix.container != 'ubuntu:24.04'
      run: dnf install -y git gcc make cmake

    # Setup OneAPI, icx is necessary for third-party libs
    - uses: rscohn2/setup-oneapi@v0
      if: matrix.mpi == 'intelmpi'
      with:
        components: |
          ifx
          icx
          impi
          mkl

    - uses: rscohn2/setup-oneapi@v0
      if: matrix.mpi != 'intelmpi'
      with:
        components: |
          mkl

    - name: install openmpi
      if: matrix.mpi == 'openmpi' && matrix.container != 'ubuntu:24.04'
      run: dnf install -y openmpi-devel

    - name: install openmpi
      if: matrix.mpi == 'openmpi' && matrix.container == 'ubuntu:24.04'
      run: |
        sudo apt-get update
        sudo apt-get install libopenmpi-dev openmpi-bin

    - uses: actions/checkout@v4

    - name: set linux-gnu compiler
      if: runner.os == 'Linux' && matrix.mpi == 'openmpi'
      shell: bash
      run: |
        echo "CC=gcc" >> $GITHUB_ENV
        echo "CXX=g++" >> $GITHUB_ENV
        echo "FC=gfortran" >> $GITHUB_ENV

    - name: set linux-gnu compiler
      if: runner.os == 'Linux' && matrix.mpi == 'intelmpi'
      shell: bash
      run: |
        echo "CC=icx" >> $GITHUB_ENV
        echo "CXX=icx" >> $GITHUB_ENV
        echo "FC=mpiifx" >> $GITHUB_ENV

    - name: build fds
      run: |
        source /opt/intel/oneapi/setvars.sh
        cmake -B builddir -S . -DCMAKE_BUILD_TYPE=${{matrix.build_type}}
        cmake --build builddir -j

  cmake-osx:
    # Set the name of this build, variable depending on the OS
    name: cmake ${{ matrix.os }} ${{ matrix.mpi }} ${{ matrix.build_type }}
    strategy:
      fail-fast: false
      # The matrix sets all the different combinations of builds, e.g. platforms
      # and build configurations
      matrix:
        os:
          - macos-latest
        mpi:
          - "openmpi"
        build_type:
          - "Debug"
          # - "Release"
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: install openmpi
        run: brew install open-mpi

      - name: set macos gcc
        shell: bash
        run: |
          echo "CC=gcc-14" >> $GITHUB_ENV
          echo "CXX=g++-14" >> $GITHUB_ENV
          echo "FC=gfortran-14" >> $GITHUB_ENV
          echo "OMPI_FC=gfortran-14" >> $GITHUB_ENV
          brew install glew gd zlib json-c
      - name: Build
        shell: bash
        run: |
          cmake -B builddir -DCMAKE_BUILD_TYPE=${{matrix.build_type}}
          cmake --build builddir -j
