name: github-linux
env:
  BUILD_TYPE: Debug

on:
  push:
    paths:
    - .github/**
    - Build/**
    - Source/**
  pull_request:
    paths:
    - .github/**
    - Build/**
    - Source/**


concurrency:
  group: ${{ github.event_name }}-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}


permissions:
  contents: read

jobs:
  linux-intel-intelmpi:
    # build on ubuntu using ifort with intelmpi and mkl based on
    # https://github.com/oneapi-src/oneapi-ci

    name: linux intel intelmpi
    runs-on: [ubuntu-latest]

    steps:
    - uses: rscohn2/setup-oneapi@v0
      with:
        components: |
          ifx
          impi
          mkl

    - uses: actions/checkout@v4

    - name: Check Current Memory Limit
      run: ulimit -a  # Check the memory limits

    - name: free -h command
      run: free -h

    - name: build fds debug
      run: |
        source /opt/intel/oneapi/setvars.sh
        cd ./Build/impi_intel_linux_db
        ./make_fds.sh
        ./fds_impi_intel_linux_db

    - name: free -h command
      run: free -h

    - name: build fds release
      run: |
        source /opt/intel/oneapi/setvars.sh
        cd ./Build/impi_intel_linux
        ./make_fds.sh
        ./fds_impi_intel_linux

    - name: free -h command
      run: free -h

    # Setup python
    - uses: actions/setup-python@v5
      with:
        python-version: '3.9'
        cache: 'pip' # caching pip dependencies
    - run: pip install -r .github/requirements.txt

    # Run Hello World test
    - name: Python test
      run: |
        echo $GITHUB_WORKSPACE
        cd $GITHUB_WORKSPACE/Utilities/Python
        python hello_world.py
        python FDS_verification_script.py



  linux-gnu-openmpi:
    # build on ubuntu using gfortran with openmpi and mkl based on
    # https://github.com/oneapi-src/oneapi-ci

    name: linux gnu openmpi
    runs-on: [ubuntu-latest]

    steps:
    - name: install openmpi
      run: |
        sudo apt-get update
        sudo apt-get install libopenmpi-dev openmpi-bin
    - uses: rscohn2/setup-oneapi@v0
      with:
        components: |
          mkl

    - uses: actions/checkout@v4
    - name: build fds debug
      run: |
        source /opt/intel/oneapi/setvars.sh
        cd ./Build/ompi_gnu_linux_db
        ./make_fds.sh
        ./fds_ompi_gnu_linux_db
    - name: build fds release
      run: |
        source /opt/intel/oneapi/setvars.sh
        cd ./Build/ompi_gnu_linux
        ./make_fds.sh
        ./fds_ompi_gnu_linux

  cmake-linux-intel-intelmpi:
    # build on ubuntu using ifort with intelmpi and mkl based on
    # https://github.com/oneapi-src/oneapi-ci

    name: cmake ${{ matrix.container }} intel ${{ matrix.mpi }}
    runs-on: [ubuntu-latest]
    # container: ${{ matrix.container }}
    strategy:
      matrix:
        container:
          # - "fedora:40"
          # - "rockylinux:9"
          - "ubuntu:24.04"
        mpi:
          - "intelmpi"
          - "openmpi"
    steps:
    - name: Install prerequisites
      if: matrix.container != 'ubuntu:24.04'
      run: dnf install -y git gcc make cmake

    - uses: rscohn2/setup-oneapi@v0
      if: matrix.mpi == 'intelmpi'
      with:
        components: |
          ifx
          impi
          mkl

    - uses: rscohn2/setup-oneapi@v0
      if: matrix.mpi != 'intelmpi'
      with:
        components: |
          mkl

    - name: install openmpi
      if: matrix.mpi == 'openmpi' && matrix.container != 'ubuntu:24.04'
      run: dnf install -y openmpi-devel
    - name: install openmpi
      if: matrix.mpi == 'openmpi' && matrix.container == 'ubuntu:24.04'
      run: |
        sudo apt-get update
        sudo apt-get install libopenmpi-dev openmpi-bin

    - uses: actions/checkout@v4

    - name: Check Current Memory Limit
      run: ulimit -a  # Check the memory limits

    - name: free -h command
      run: free -h

    - name: build fds debug
      run: |
        source /opt/intel/oneapi/setvars.sh
        if [ "${{ matrix.mpi }}" = "intelmpi" ]
        then
          export FC=mpiifx
        fi
        cmake -B builddir -S .
        cmake --build builddir
  cmake-osx:
    # Set the name of this build, variable depending on the OS
    name: build ${{ matrix.os }} - gcc
    strategy:
      fail-fast: false
      # The matrix sets all the different combinations of builds, e.g. platforms
      # and build configurations
      matrix:
        os:
          - macos-latest
    # Set the platform to build on
    runs-on: ${{ matrix.os }}
    steps:
      # Check out the smv repo
      - name: Checkout code
        uses: actions/checkout@v3
      # If we are currently building on Linux (ubuntu) install all the native
      # pre-requisites
      - name: Install linux deps
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install build-essential freeglut3-dev libx11-dev libxmu-dev libxi-dev libglew-dev libgd-dev libjson-c-dev
      # If we are building on macos configure the environment to use gcc-14 as
      # the compiler
      - name: set macos gcc
        if: runner.os == 'macOS'
        shell: bash
        run: |
          echo "CC=gcc-14" >> $GITHUB_ENV
          echo "CXX=g++-14" >> $GITHUB_ENV
          brew install glew gd zlib json-c
      # If we are building on linux configure the environment to use gcc as the
      # compiler
      - name: set linux gcc
        if: runner.os == 'Linux'
        shell: bash
        run: |
          echo "CC=gcc" >> $GITHUB_ENV
          echo "CXX=g++" >> $GITHUB_ENV
      # Remove Visualization data on macos as we can't render currently.
      - name: Download test data
        if: runner.os == 'macOS'
        run: rm -rf Verification/Visualization/*.smv
      # Run cmake to build smokeview
      - name: Build
        shell: bash
        run: |
          cmake -B ${{github.workspace}}/cbuild -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
          cmake --build ${{github.workspace}}/cbuild -j4
